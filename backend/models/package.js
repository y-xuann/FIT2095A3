const mongoose = require("mongoose");

/**
 * Schema for the package model.
 * @module package
 * @type {Object}
 * @property {String} packageId - Unique identifier for the package, generated by default.
 * @property {String} packageTitle - Title of the package, must be 3-15 characters and alphanumeric.
 * @property {Number} packageWeight - Weight of the package, must be a positive number.
 * @property {String} packageDestination - Destination of the package, must be 5-15 characters and alphanumeric.
 * @property {String} description - Description of the package, optional and must be at most 30 characters.
 * @property {String} createdAt - Timestamp for when the package was created, generated by default.
 * @property {Boolean} isAllocated - Indicates if the package has been allocated to a driver.
 * @property {String} driverId - ID of the driver assigned to the package, must be 10(generated) or 24(mongodb ID) characters long.
 */

const packageSchema = mongoose.Schema({
    packageId: {
        type: String,
        default: generateId
    },

	packageTitle: {
		type: String,
        validate:{
            validator: function (name){
                return name.length >= 3 && name.length <= 15 && isAlphaNumeric(name) 
            },
            message: "Invalid package's name."
        },
		required: true,
	},

    packageWeight:{
        type: Number,
        validate:{
            validator: function(weight){
                return weight > 0
            },
            message: "Invalid package's weight."
        },
        required: true,
    },

    packageDestination:{
        type: String,
        validate:{
            validator: function (destination){
                return destination.length >= 5 && destination.length <= 15 && isAlphaNumeric(destination) 
            },
            message: "Invalid package's destination."
        },
        required: true,
    },

    description:{
        type: String,
        validate:{
            validator: function (description){
                return description.length <= 30
            },
            message: "Invalid package's description."
        },
    },

    createdAt: {
        type: String,
        default: generateDate
    },

    isAllocated: {
        type: Boolean,
        required: true
    },

    driverId: {
        type: mongoose.Schema.Types.ObjectId,
        ref: "Driver",
        validate: {
            validator: function (id) {
              return mongoose.Types.ObjectId.isValid(id)
            },
            message: "Invalid driver's id."
          },
        required: true,
    },
});

// Export the Package model based on the schema.
module.exports = mongoose.model("Package", packageSchema);


/**
 * Generates an unique ID for the package
 * @returns {String}
 */
function generateId(){
    const FIRST_LETTER = 'P';
    const LETTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    let randomLetters = '';
    for (let i = 1; i <= 2; i++){
        randomLetters += LETTERS.charAt(Math.floor(Math.random() * LETTERS.length));
    }

    let randomDigits = '';
    for (let i = 1; i <= 3; i++){
        randomDigits += Math.floor(Math.random()*10);
    }
    return (`${FIRST_LETTER}${randomLetters}-YC-${randomDigits}`)

}

/**
 * Generates the current date and time in a localized string format.
 * @function
 * @returns {String} - A string representing the current date and time.
 */
function generateDate(){
    var today = new Date();
    return(today.toLocaleString());
}

/**
 * Check if a string contains only alphabetic character
 * @function
 * @param {string} str - The string to be tested  
 * @returns {boolean} - Returns `true` if the string contains only alphabetic characters; `false` otherwise.
 */
function isAlpha(str){
    return /^[a-zA-Z]*$/.test(str);
}

/**
 * Checks if a string contains only alphanumeric characters (letters and numbers).
 * @function
 * @param {string} str - The string to be tested.
 * @returns {boolean} - Returns `true` if the string contains only alphanumeric characters; `false` otherwise.
 */
function isAlphaNumeric(str){
    return /^[a-z0-9]*$/gi.test(str);
}
